#include <QCoreApplication>
#include <QRect>
#include <QtGui/QImage>
#include <QApplication>
#include <QtWidgets>
#include <iostream>
#include <sstream>
#include <QVector>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>
#include <boost/numeric/ublas/lu.hpp>
#include <boost/math/special_functions/gamma.hpp>
#include <boost/graph/undirected_graph.hpp>
#include "haar.hpp"
#include "subimage.h"
#include <Eigen/Dense>
#include <Eigen/Eigenvalues>
#include <algorithm>

extern "C" {
#include <src/cluster.h>
}
typedef boost::undirected_graph<> Graph;
using namespace std;
using namespace boost::numeric::ublas;
using Eigen::MatrixXd;
using Eigen::VectorXcd;

void rgbCreate (matrix<subImage> subImg, int i, int j) {
    // RGB Creation

    QImage cropped = subImg(i,j).getImg();

    for (int z = 0 ; z < cropped.height(); ++z) {
         int count=0;
           for (int f = 0; f < cropped.width(); ++f) {
             QRgb c = cropped.pixel(f,z);
             subImg(i,j).setRed(qRed(c),f,z);
             subImg(i,j).setGreen(qGreen(c),f,z);
             subImg(i,j).setBlue(qBlue(c),f,z);
             count++;
           }
     }
    // End of RGB Creation
}

void normalize(double waveRed[],double waveGreen[],double waveBlue[],double* normRed, double* normGreen,double* normBlue,int arraySize, double level)
{
    double dev=0, avg=0;
    //Deviation calculation
             // Calc Avg
             for (int p=0 ; p<arraySize ; p++ ) {
                avg+=(waveRed[p]+waveGreen[p]+waveBlue[p]);
             }
             avg=avg/(arraySize*3);

             // End of AVG calc


             for (int p=0 ; p<arraySize ; p++ ) {
                 dev+=(pow((waveRed[p]-avg),2)+pow((waveGreen[p]-avg),2)+pow((waveBlue[p]-avg),2));
             }
             dev=sqrt(dev/(arraySize*3));
    // End of Deviation calculation
             //Normalization (cutting)
             /*
             for (int p=0 ; p<arraySize ; p++ ) {
                 if(waveRed[p]-avg>level*dev)  normRed[p]=avg+level*dev;
                 else if(waveRed[p]-avg<-level*dev) normRed[p]=avg-level*dev;
                 else  normRed[p]=waveRed[p];
                 if(waveGreen[p]-avg>level*dev)  normGreen[p]=avg+level*dev;
                 else if(waveGreen[p]-avg<-level*dev) normGreen[p]=avg-level*dev;
                 else  normGreen[p]=waveGreen[p];
                 if(waveBlue[p]-avg>level*dev)  normBlue[p]=avg+level*dev;
                 else if(waveBlue[p]-avg<-level*dev) normBlue[p]=avg-level*dev;
                 else normBlue[p]=waveBlue[p];
                 */
             }

void createMatrix (matrix<double> &var, matrix<subImage> subImg, int i, int j, int arraySize) {

    double rr=0, rg=0, rb=0, gg=0, bb=0, gb=0;

    double normRed[arraySize];
    double normGreen[arraySize];
    double normBlue[arraySize];

    subImg(i,j).matrixToWaveArray(normRed, normGreen, normBlue); //  // Change 2שים לב שאתה עובד פה עם המערכים שיצרת לפני שניה זה הכל זבל ולא ערכים שקיבלנו

    // Create Var Matrix
   for (int p=0 ; p<arraySize ; p++ ) {
       rr+=normRed[p]*normRed[p];
       rg+=normRed[p]*normGreen[p];
       rb+=normRed[p]*normBlue[p];
       gg+=normGreen[p]*normGreen[p];
       bb+=normBlue[p]*normBlue[p];
       gb+=normGreen[p]*normBlue[p];
   }

   var(0,0)=rr/arraySize;
   var(1,1)=gg/arraySize;
   var(2,2)=bb/arraySize;
   var(0,1)=var(1,0)=rg/arraySize;
   var(0,2)=var(2,0)=rb/arraySize;
   var(2,1)=var(1,2)=gb/arraySize;
    // End of Create Var Matrix
}

matrix<double> createSigma (matrix<subImage> subImg, int i, int j, matrix<double> var) {

    double temp, m, beta;
    matrix<double> sigma (3, 3);

    m=subImg(i,j).getM();
    beta=subImg(i,j).getBeta();

    // Sigma Creationg

    temp=m*tgamma(m/(2*beta))/(pow(2,1/beta)*tgamma((m+2)/(2*beta)));
    sigma=temp*var;
    return (sigma);
    // End of Sigma Creation
}

void distCalc(subImage subImgagesArr[],  matrix<double> &dist, double** distMat, int subPics)
{
    matrix<double> sigma1(3,3), sigma2(3,3), invSigma2(3,3), result(3,3);
    matrix<complex<double>> eigenVal(1,3), s1(1,1), s2(3,3);
    complex<double> sum1,sum2;
    double bh=4/(4*5);           //m=3

    for(int i=0; i<subPics; i++) {
        for(int j=i; j<subPics; j++)
        {
            if(i==j)
                dist(i,j)=0;
            else{
         sigma1=subImgagesArr[i].getSigma();
         sigma2=subImgagesArr[j].getSigma();
         double determinant =    sigma2(0,0)*(sigma2(1,1)*sigma2(2,2)-sigma2(2,1)*sigma2(1,2))
                                 -sigma2(0,1)*(sigma2(1,0)*sigma2(2,2)-sigma2(1,2)*sigma2(2,0))
                                 +sigma2(0,2)*(sigma2(1,0)*sigma2(2,1)-sigma2(1,1)*sigma2(2,0));
         double invdet = 1/determinant;
         invSigma2(0,0) =  (sigma2(1,1)*sigma2(2,2)-sigma2(2,1)*sigma2(1,2))*invdet;
         invSigma2(1,0) = -(sigma2(0,1)*sigma2(2,2)-sigma2(0,2)*sigma2(2,1))*invdet;
         invSigma2(2,0) =  (sigma2(0,1)*sigma2(1,2)-sigma2(0,2)*sigma2(1,1))*invdet;
         invSigma2(0,1) = -(sigma2(1,0)*sigma2(2,2)-sigma2(1,2)*sigma2(2,0))*invdet;
         invSigma2(1,1) =  (sigma2(0,0)*sigma2(2,2)-sigma2(0,2)*sigma2(2,0))*invdet;
         invSigma2(2,1) = -(sigma2(0,0)*sigma2(1,2)-sigma2(1,0)*sigma2(0,2))*invdet;
         invSigma2(0,2) =  (sigma2(1,0)*sigma2(2,1)-sigma2(2,0)*sigma2(1,1))*invdet;
         invSigma2(1,2) = -(sigma2(0,0)*sigma2(2,1)-sigma2(2,0)*sigma2(0,1))*invdet;
         invSigma2(2,2) =  (sigma2(0,0)*sigma2(1,1)-sigma2(1,0)*sigma2(0,1))*invdet;
         result=prod(sigma1,invSigma2);

         MatrixXd resulTemp = MatrixXd::Ones(3,3);

         for (int p = 0 ; p < 3 ; p++)
             for (int d = 0 ; d < 3 ; d++)
                 resulTemp(p,d)=result(p,d);
         VectorXcd eivals = resulTemp.eigenvalues();
         for (int t = 0 ; t < 3 ; t++)
             eigenVal(0,t)=log(eivals[t]);
         s1=prod(eigenVal,trans(eigenVal));
         sum1=s1(0,0);
         s2=prod(trans(eigenVal),eigenVal);
         sum2=(s2(0,0)+s2(0,1)+s2(0,2)+s2(1,0)+s2(1,1)+s2(1,2)+s2(2,0)+s2(2,1)+s2(2,2)-sum1)/2;
        dist(i,j)=dist(j,i)=distMat[i][j]=distMat[j][i]=pow(abs(((3*bh - 0.25) * sum1 + 2*(bh - 0.25) * sum2)),0.5);

            }
        }
    }
}

void graphCreation(Graph g,Graph::vertex_descriptor v[], int clusterid[], int flag)
{
    for(int i=0; i<400; i++)
      v[i]=g.add_vertex();
    for(int i=0; i<380; i++)
    {
        if(clusterid[i]==clusterid[i+20]) //check the subpic below
            add_edge(v[i], v[i+20],g);
        if(clusterid[i]==clusterid[i+1] && i%20!=19) //check the subpic on the right side
            add_edge(v[i], v[i+1],g);
        if(flag==1)
          {
            if(clusterid[i]==clusterid[i+21] && i%20!=19) //check the right diag
                add_edge(v[i], v[i+21],g);
            if(clusterid[i]==clusterid[i+19] && i%20!=0) // cheack the left diag
                add_edge(v[i], v[i+19],g);
         }
    }
    for(int i=380; i<399; i++)
        if(clusterid[i]==clusterid[i+1]) //check the subpic on the right side
            add_edge(v[i], v[i+1],g);
}

int main(int argc, char *argv[]) {

    QApplication app(argc, argv);  // Initializate an aplication

    QWidget Main_Window;
    Main_Window.resize(700, 700);  // Create a main window

    QImage img("D:\\Pict_Qt\\Pict_Qt\\grass2.jpg");  // Load an image
    QString name("D:\\Pict_Qt\\Pict_Qt\\SubImages"); // name of folder for sub images

    int nSubPic = 20, subPics = nSubPic*nSubPic;
    int img_w = img.width(), w = img_w/nSubPic;  //Sizes of image and subimages
    int img_h = img.height(), h = img_h/nSubPic;

    matrix<subImage> subImgages (nSubPic, nSubPic);       // Matrix for sub Images
    subImage subImgagesArr [subPics];
    int count=0;
    QRect rect(0, 0, w, h);
    QImage cropped;
    double max, min, level=2, dispRed[w*h], dispGreen[w*h], dispBlue[w*h],
            tempRed[w*h], tempGreen[w*h], tempBlue[w*h], normRed[w*h], normGreen[w*h], normBlue[w*h];


    for(unsigned i = 0, k = 0; i < subImgages.size1(); i++){
        for(unsigned j = 0; j < subImgages.size2(); j++){

            rect.moveTo(w*j, h*i);
            cropped = img.copy(rect);  //exstracting subimages


            name.append(QString::number(k)); // name of subimage
            name.append(".jpg");

            cropped.save(name,"JPG"); //saving subimages
            k++;

            subImgages(i,j).setData(h, w, cropped);

            // RGB Creation
            for (int z = 0 ; z < h; ++z){
                for (int f = 0; f < w; ++f) {
                     QRgb c = cropped.pixel(f,z);
                     subImgages(i,j).setRed(qRed(c),z,f);
                     subImgages(i,j).setGreen(qGreen(c),z,f);
                     subImgages(i,j).setBlue(qBlue(c),z,f);
                   }
            }
            // End of RGB Creation

            subImgages(i,j).matrixToArray(tempRed, tempGreen, tempBlue);

            haar_2d (w,h,tempRed);
            haar_2d (w,h,tempGreen);
            haar_2d (w,h,tempBlue);

            subImgages(i,j).arrayToWaveMatrix(tempRed, tempGreen, tempBlue);

            //##################################################################
            int arraySize=w*h;       // Size of the arrays
            normalize(tempRed,tempGreen,tempBlue,normRed,normGreen,normBlue,arraySize,level);

          //  haar_2d_inverse(w,h,normRed);
          //  haar_2d_inverse(w,h,normGreen);
          //  haar_2d_inverse(w,h,normBlue);

            subImgages(i,j).arrayToNormMatrix(normRed, normGreen, normBlue);

            /*
            max = normRed[0];
            min = normRed[0];

            for(int l=0; l<arraySize; l++){
                if (normRed[l]>max) max = normRed[l];
                if (normGreen[l]>max) max = normGreen[l];
                if (normBlue[l]>max) max = normBlue[l];
                if (normRed[l]<min) min = normRed[l];
                if (normGreen[l]<min) min = normGreen[l];
                if (normBlue[l]<min) min = normBlue[l];
            }

            // End of Normalization
            int counter1=0;

            for (int z = 0 ; z < h; z++){
                for (int f = 0; f < w; f++) {
                   dispRed[counter1] = ((subImgages(i,j).getNormRed(z,f)-min)/(max-min))*255;
                   dispGreen[counter1] = ((subImgages(i,j).getNormGreen(z,f)-min)/(max-min))*255;
                   dispBlue[counter1] = ((subImgages(i,j).getNormBlue(z,f)-min)/(max-min))*255;

                   counter1++;
                }
            }

            subImgages(i,j).arrayToWaveMatrix(dispRed, dispGreen, dispBlue);
*/
            //Gauss
            matrix<double> var (3, 3);
            createMatrix (var, subImgages , i, j, arraySize);

            subImgages(i,j).setSigma(createSigma(subImgages , i, j, var));
            // End of Gauss

            subImgagesArr[count]=subImgages(i,j);
            count++;
        }
    }


    matrix<double> distances (subPics, subPics);

    // distMat initial
    double **distMat;
    distMat = new double *[subPics];

    for(int i = 0; i <subPics; i++)
        distMat[i] = new double[subPics];
    // END of initial

    distCalc(subImgagesArr, distances, distMat, subPics);

    int clusterid[subPics];

    double *error;
    int *ifound;
    QColor col;

    error = new double;
    ifound = new int;
    int numOfClust = 4, k=0, clusters[numOfClust] = {0};

    kmedoids (numOfClust, subPics, distMat, 10, clusterid, error, ifound); // Clustering

    array<int,400> clusteridCopy = clusterid; // Temp Array

    sort(clusteridCopy,clusteridCopy+subPics);

    clusters[0]=clusterid[0];

    for (int i=0; i < numOfClust-1 ; i++)
    {
        while (clusters[i] <= clusterid[k])
               k++;

        clusters[i+1]=clusterid[k];
    }

    cout << clusters[0] << endl;
    cout << clusters[1] << endl;

    cout << clusters[2] << endl;

    cout << clusters[3] << endl;

    int flag; // if flag=1 check the subpic on the diagonal
    flag=1;
    Graph g;
    Graph::vertex_descriptor v[400];
    graphCreation(g ,v, clusterid, flag);
    cout << "expected :0  result:";
   if(boost::edge(v[359],v[360],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[359],v[378],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :0  result:";
   if(boost::edge(v[359],v[377],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[359],v[358],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[358],v[378],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[358],v[379],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[358],v[377],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[340],v[341],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :0  result:";
   if(boost::edge(v[340],v[359],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[340],v[360],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;
   cout << "expected :1  result:";
   if(boost::edge(v[340],v[361],g).second)
       cout << "1"<< endl;
   else cout << "0"<< endl;



for(unsigned i = 0; i < subImgages.size1(); i++) {
        for(unsigned j = 0; j < subImgages.size2(); j++)
        {
            int mark = clusterid[i*subImgages.size1()+j];

            for (int z = 0 ; z < cropped.height(); z++) {
                for (int f = 0; f < cropped.width(); f++) {
                     QPoint p(f,z);


                     if (mark==clusters[0])
                         col.setRgb(subImgages(i,j).getRed(z,f), subImgages(i,j).getGreen(z,f), subImgages(i,j).getBlue(z,f));
                     if (mark==clusters[1])
                         col.setRgb(subImgages(i,j).getRed(z,f), subImgages(i,j).getGreen(z,f), subImgages(i,j).getBlue(z,f));
                     if (mark==clusters[2])
                         col.setRgb(subImgages(i,j).getRed(z,f), subImgages(i,j).getGreen(z,f), subImgages(i,j).getBlue(z,f));
                     if (mark==clusters[3])
                         col.setRgb(subImgages(i,j).getRed(z,f), subImgages(i,j).getGreen(z,f), subImgages(i,j).getBlue(z,f));

                     subImgages(i,j).testImg(p, col);
                }
          }
        mark=-1;



/*
            //Wavelet test
            for (int z = 0 ; z < h; z++){
                for (int f = 0; f < w; f++){
                    QColor col;
                    col.setRgb(subImgages(i,j).getWaveRed(z,f), subImgages(i,j).getWaveGreen(z,f), subImgages(i,j).getWaveBlue(z,f));
                    QPoint p(f,z);
                    subImgages(i,j).testImg(p, col);
                }
            }

        //End of test
        */
        }
    }


// ###################################################################### Test our matrix ######################################################################

    QLabel *i_label[subPics];   // Labels on the window (places for subimages)

    for(int i = 0, k = 0; i < nSubPic; i++){
        for(int j = 0; j < nSubPic; j++){
            rect.moveTo(w*j, h*i);
            QImage cropped = img.copy(rect);  //exstracting subimages

            i_label[k] = new QLabel("", &Main_Window);  // add label to main window
            i_label[k]->setGeometry(w*i, h*j, w, h); // set label position
            i_label[k]->setPixmap(QPixmap::fromImage(subImgages(j,i).getImg())); // load subimage to label
        }
    }
//###################################################################### Test our matrix ######################################################################

    Main_Window.show(); // Sow main windows
    return app.exec(); // return from application
}
